-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Dec 02, 2024 at 03:39 PM
-- Server version: 10.5.27-MariaDB-cll-lve
-- PHP Version: 8.3.14

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `tesr3386_stickynotes`
--

-- --------------------------------------------------------

--
-- Table structure for table `notes`
--

CREATE TABLE `notes` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `pinned` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

--
-- Dumping data for table `notes`
--

INSERT INTO `notes` (`id`, `title`, `content`, `created_at`, `pinned`) VALUES
(23, 'cempns', 'const jsonData = {\n\"nik\": \"1234567890123456\",\n\"noKK\": \"6543210987654321\",\n\"nama\": \"John Doe\",\n\"tempatLahir\": \"Jakarta\",\n\"tglLahir\": \"11-09-2001\",\n\"kabKotaKTP\": \"Jakarta Pusat\",\n\"noHp\": \"081234567890\",\n\"email\": \"johndoe@example.com\",\n\"captcha\": \"1234\"\n};\n\nObject.keys(jsonData).forEach(key => {\nconst field = document.querySelector(`[name=\"${key}\"]`);\nif (field) {\nfield.value = jsonData[key];\nconst event = new Event(\'input\', { bubbles: true });\nfield.dispatchEvent(event);\n} else {\nconsole.warn(`Field with name \"${key}\" not found`);\n}\n});\n\nconsole.log(\"Form data loaded from JSON:\", jsonData);', '2024-08-26 14:41:12', 0),
(27, 'research google', 'https://colab.research.google.com/drive/1_2Nx-IdaD1XdMeQXSUnWaLt59gYZ_0Cb?usp=sharing', '2024-08-28 03:08:32', 0),
(28, 'xml', '<Configuration>\n<Add OfficeClientEdition=\"64\" Channel=\"Current\">\n<Product ID=\"O365ProPlusRetail\">\n<Language ID=\"en-us\" />\n<ExcludeApp ID=\"Access\" />\n<ExcludeApp ID=\"Publisher\" />\n<ExcludeApp ID=\"Outlook\" />\n<ExcludeApp ID=\"OneNote\" />\n<ExcludeApp ID=\"Teams\" />\n<ExcludeApp ID=\"OneDrive\" />\n<IncludeApp ID=\"Word\" />\n<IncludeApp ID=\"Excel\" />\n<IncludeApp ID=\"PowerPoint\" />\n</Product>\n</Add>\n<Display Level=\"Full\" AcceptEULA=\"TRUE\" />\n<Property Name=\"AUTOACTIVATE\" Value=\"1\" />\n<RemoveMSI />\n<Updates Enabled=\"TRUE\" />\n</Configuration>\n\nsetup.exe /configure configuration.xml\n', '2024-08-29 15:34:11', 0),
(29, 'install office', 'setup.exe /configure configuration.xml', '2024-08-29 16:16:38', 0),
(31, 'sdfsefs', 'sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000\r\n', '2024-08-30 03:59:38', 0),
(38, 'y', 'WEB1 - delipsec.my.id\r\n\r\nSSL path : /home/web1/public_html/cert/1717064405113635/', '2024-09-20 09:58:01', 0),
(39, 'x', '[19/09, 1:55â€¯pm] DP IT AGUS: ini settingan virtual host 443\r\n\r\nServerName delipsec.my.id\r\nServerAlias www.delipsec.my.id\r\nServerAlias mail.delipsec.my.id\r\nServerAlias webmail.delipsec.my.id\r\nServerAlias admin.delipsec.my.id\r\nDocumentRoot /home/web1/public_html\r\nErrorLog /var/log/virtualmin/delipsec.my.id_error_log\r\nCustomLog /var/log/virtualmin/delipsec.my.id_access_log combined\r\nDirectoryIndex index.php index.htm index.html\r\n<Directory /home/web1/public_html>\r\n    Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch +ExecCGI\r\n    Require all granted\r\n    AllowOverride All Options=ExecCGI,Includes,IncludesNOEXEC,Indexes,MultiViews,SymLinksIfOwnerMatch\r\n    AddType application/x-httpd-php .php\r\n    AddHandler fcgid-script .php\r\n    AddHandler fcgid-script .php7.4\r\n    AddHandler fcgid-script .php8.2\r\n    AddHandler fcgid-script .php8.3\r\n    FCGIWrapper /home/web1/fcgi-bin/php7.4.fcgi .php7.4\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.2.fcgi .php8.2\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.3.fcgi .php8.3\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.2.fcgi .php\r\n</Directory>\r\n<Directory /home/web1/cgi-bin>\r\n    Require all granted\r\n    AllowOverride All Options=ExecCGI,Includes,IncludesNOEXEC,Indexes,MultiViews,SymLinksIfOwnerMatch\r\n</Directory>\r\nProxyPass /.well-known !\r\nRewriteEngine on\r\nRewriteCond %{HTTP_HOST} =webmail.delipsec.my.id\r\nRewriteRule ^(?!/.well-known)(.*) https://delipsec.my.id:20000/ [R]\r\nRewriteCond %{HTTP_HOST} =admin.delipsec.my.id\r\nRewriteRule ^(?!/.well-known)(.*) https://delipsec.my.id:10000/ [R]\r\nRemoveHandler .php\r\nRemoveHandler .php7.4\r\nRemoveHandler .php8.2\r\nRemoveHandler .php8.3\r\nSSLEngine on\r\nSSLCertificateFile /etc/ssl/virtualmin/1717064405113635/ssl.cert\r\nSSLCertificateKeyFile /etc/ssl/virtualmin/1717064405113635/ssl.key\r\nSSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1\r\nScriptAlias /awstats /home/web1/cgi-bin/awstats.pl\r\nRedirectMatch ^/awstats$ /awstats/\r\nRedirectMatch ^/(?!.well-known)(.*)$ http://delipsec.my.id:3000\r\n<Files awstats.pl>\r\n    AuthName \"web1.delipark.com statistics\"\r\n    AuthType Basic\r\n    AuthUserFile /home/web1/.awstats-htpasswd\r\n    require valid-user\r\n</Files>\r\nIPCCommTimeout 31\r\nFcgidMaxRequestLen 1073741824\r\nSSLCACertificateFile /etc/ssl/virtualmin/1717064405113635/ssl.ca\r\n[19/09, 1:56â€¯pm] DP IT AGUS: settingan host 80\r\n\r\nServerName delipsec.my.id\r\nServerAlias www.delipsec.my.id\r\nServerAlias mail.delipsec.my.id\r\nServerAlias webmail.delipsec.my.id\r\nServerAlias admin.delipsec.my.id\r\nDocumentRoot /home/web1/public_html\r\nErrorLog /var/log/virtualmin/delipsec.my.id_error_log\r\nCustomLog /var/log/virtualmin/delipsec.my.id_access_log combined\r\nDirectoryIndex index.php index.htm index.html\r\n<Directory /home/web1/public_html>\r\n    Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch +ExecCGI\r\n    Require all granted\r\n    AllowOverride All Options=ExecCGI,Includes,IncludesNOEXEC,Indexes,MultiViews,SymLinksIfOwnerMatch\r\n    AddType application/x-httpd-php .php\r\n    AddHandler fcgid-script .php\r\n    AddHandler fcgid-script .php7.4\r\n    AddHandler fcgid-script .php8.2\r\n    AddHandler fcgid-script .php8.3\r\n    FCGIWrapper /home/web1/fcgi-bin/php7.4.fcgi .php7.4\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.2.fcgi .php8.2\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.3.fcgi .php8.3\r\n    FCGIWrapper /home/web1/fcgi-bin/php8.2.fcgi .php\r\n</Directory>\r\n<Directory /home/web1/cgi-bin>\r\n    Require all granted\r\n    AllowOverride All Options=ExecCGI,Includes,IncludesNOEXEC,Indexes,MultiViews,SymLinksIfOwnerMatch\r\n</Directory>\r\nProxyPass /.well-known !\r\nRewriteEngine on\r\nRewriteCond %{HTTP_HOST} =webmail.delipsec.my.id\r\nRewriteRule ^(?!/.well-known)(.*) https://delipsec.my.id:20000/ [R]\r\nRewriteCond %{HTTP_HOST} =admin.delipsec.my.id\r\nRewriteRule ^(?!/.well-known)(.*) https://delipsec.my.id:10000/ [R]\r\nRemoveHandler .php\r\nRemoveHandler .php7.4\r\nRemoveHandler .php8.2\r\nRemoveHandler .php8.3\r\nScriptAlias /awstats /home/web1/cgi-bin/awstats.pl\r\nRedirectMatch ^/awstats$ /awstats/\r\nRedirectMatch ^/(?!.well-known)(.*)$ http://delipsec.my.id:3000\r\n<Files awstats.pl>\r\n    AuthName \"delipsec.my.id statistics\"\r\n    AuthType Basic\r\n    AuthUserFile /home/web1/.awstats-htpasswd\r\n    require valid-user\r\n</Files>\r\nIPCCommTimeout 31\r\nFcgidMaxRequestLen 1073741824', '2024-09-20 09:59:08', 0),
(40, 'jlanin ini', 'sudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod rewrite\nsudo a2enmod ssl\nsudo a2enmod headers\nsudo a2enmod deflate\nsudo a2enmod proxy_balancer\nsudo a2enmod proxy_connect\nsudo a2enmod p... Read...', '2024-09-20 10:19:51', 0),
(41, '1', '/* SQL Error (1): Can\'t create/write to file \'/tmp/#sql-temptable-38f-99d8-a.MAI\' (Errcode: 30 \"Read-only file system\") */\r\n\r\n', '2024-09-27 03:15:43', 0),
(42, 'Pw: Genshin123', 'YlanVang@digiwr.com\r\nOokeWell@digiwr.com\r\nRphyNson@digiwr.com\r\nTyreMara@digiwr.com\r\nArloAnte@digiwr.com', '2024-10-02 08:48:39', 1),
(43, 'catatan project wifi', '- If your ISP doesnâ€™t offer a single 4.4 Gbps connection, you can use link aggregation to combine multiple connections (e.g., two 2.5 Gbps lines) to achieve the necessary bandwidth.\n\nCost: Higher bandwidth plans, especially dedicated lines, can be significantly more expensive than standard consumer-grade internet services. The cost of 4.4 Gbps will depend on your location, service tier, and the type of contract.\n\n\nCentrin : 48 AP\nASN : 10 AP\nBIZNET : 4 AP\nIndobiz : MO\n\n\n\n\nInterferensi di dalam indoor mall\n\n\npenawaran ASN 25 AP, captivity portal.\n\n\n\n\n\nkemungkinan SLA(service level agreement):\n\n\nSLA harus mencakup:\n\nWaktu tanggapan yang dijamin untuk setiap masalah jaringan.\n\nWaktu respons yang jelas dan terukur untuk menangani setiap gangguan atau masalah jaringan.\n\nKomitmen waktu aktif (uptime), memastikan bahwa layanan Wi-Fi selalu tersedia.\n\nJaminan bahwa layanan Wi-Fi akan tersedia dengan tingkat uptime tertentu, misalnya 99.9%, untuk menjaga kelangsungan layanan bagi pelanggan.\n\nJadwal pemeliharaan proaktif untuk mencegah masalah sebelum terjadi.\n\nPerencanaan pemeliharaan berkala yang dirancang untuk mendeteksi dan memperbaiki potensi masalah sebelum mengganggu operasi jaringan.\n\nPenalti yang jelas untuk setiap kegagalan memenuhi standar ini (misalnya, pengurangan pembayaran, potensi pengalihan akses poin ke penyedia lain).\n\nPemberlakuan denda atau konsekuensi finansial jika penyedia gagal memenuhi komitmen SLA, termasuk opsi untuk mengurangi pembayaran atau mengalihkan sejumlah akses poin ke penyedia yang lebih responsif.-\n\n\n\n\n\n\n\nOnce both ISPs submit their proposals and SLAs, carefully evaluate them. You want to ensure that ISP A has addressed their service weaknesses, and if they havenâ€™t, it gives you a strong reason to reconsider increasing their infrastructure.\n\n\n\nhttps://chatgpt.com/c/6704a4a5-4f10-8004-ad5e-fc7158318828\n\n\n', '2024-10-04 04:31:51', 0),
(45, 'vendor kompeten', 'A competent vendor should give you heatmaps, performance validation surveys, and optimization reports. If these reports show issues like channel overlap, high interference, or unbalanced load, and the vendor doesnâ€™t offer solutions, consider switching.', '2024-10-14 09:57:17', 0),
(46, 'yes', 'Step-by-Step Troubleshooting Process\r\n1. Check for Device-Specific Issues\r\nRestart Your Device: Temporary glitches on your phone or laptop can cause speed issues.\r\nForget and Reconnect to the Network: This refreshes your connection settings and might resolve authentication or configuration issues.\r\nUpdate Wi-Fi Drivers or Firmware: Ensure your Wi-Fi drivers (for laptops) or firmware (on phones) are up-to-date.\r\n2. Measure Actual Wi-Fi Signal Quality\r\nGood signal strength (-50 to -60 dBm) doesnâ€™t always guarantee good quality. You should also consider the Signal-to-Noise Ratio (SNR).\r\n\r\nCheck SNR: Use Wi-Fi diagnostic apps like NetSpot, WiFi Analyzer, or Acrylic Wi-Fi to assess both:\r\n\r\nSignal Strength: Should be between -30 dBm to -60 dBm.\r\nSNR: Should be above 25 dB for stable speeds (below this, interference or noise is likely).\r\n3. Identify Network Congestion\r\nEven with sufficient bandwidth, network congestion can cause poor speeds.\r\n\r\nRun a Speed Test (e.g., via Speedtest.net) to compare:\r\n\r\nDownload Speed vs. Upload Speed.\r\nTest at different times (peak hours vs. off-peak hours).\r\nMonitor Network Load: Use Wi-Fi tools to see how many devices are connected to the hotspot.\r\n\r\nA crowded public network can overload the router or access point, reducing speed.\r\n4. Look for Channel Interference\r\nIn public hotspots, multiple Wi-Fi networks often overlap on the same channels, especially on 2.4 GHz bands, causing interference.\r\n\r\nUse Wi-Fi Analyzer Apps: Check if neighboring networks are on the same channel.\r\nSwitch Bands: If the hotspot offers both 2.4 GHz and 5 GHz bands, try connecting to the 5 GHz band for better speeds and less interference.\r\n5. Verify Your Deviceâ€™s Network Settings\r\nDNS Issues: Sometimes slow speeds are due to slow DNS resolution.\r\nChange DNS to Google DNS (8.8.8.8 / 8.8.4.4) or Cloudflare DNS (1.1.1.1) to see if speeds improve.\r\nProxy or VPN Issues: If youâ€™re connected through a VPN or proxy, try disconnecting and running a speed test to see if speeds improve.\r\n6. Test Internet Speed on Different Devices\r\nTry connecting multiple devices (phone, laptop, tablet) to see if the issue is device-specific.\r\nIf all devices experience slow speeds, itâ€™s likely an issue with the hotspot or the router itself.\r\n7. Check for Throttling or Bandwidth Limits\r\nPublic hotspots may implement bandwidth limits or throttle speeds to ensure fair use for all users.\r\n\r\nWhat to Do:\r\n\r\nCheck the network\'s terms of use to see if there are bandwidth limits.\r\nIf speeds improve off-peak (e.g., at night), the hotspot might use bandwidth shaping.\r\n', '2024-10-15 02:44:22', 0),
(47, 'cara menghindari distraction', 'Here are some effective strategies to prevent distractions and stay focused during challenging tasks, like reading technical books. These methods are designed to work even if you have a wandering mind or are easily distracted:\r\n\r\n1. Mind Dump Technique\r\nHow it works: Keep a notepad or app (like Google Keep or Notion) beside you. When a distracting thought (like \"Napoleonâ€™s generals\") comes up, write it down quickly and promise yourself you\'ll explore it later.\r\nWhy it helps: It offloads intrusive thoughts without suppressing them, letting you stay focused without anxiety.\r\n2. Active Reading / Note-taking Method\r\nHow it works: Engage more actively by highlighting, making marginal notes, or using the SQ3R Method (Survey, Question, Read, Recite, Review).\r\nWhy it helps: Turning passive reading into active learning keeps your mind engaged, leaving less room for distractions.\r\n3. Chunking with Rewards\r\nHow it works: Break your reading or study session into small chunks (e.g., 20-30 minutes) followed by a small rewardâ€”like checking an interesting Napoleon fact, a snack, or a short walk.\r\nWhy it helps: Your brain knows a reward is coming soon, making it easier to push through tough content.\r\n4. Environment Control (Distraction-Free Setup)\r\nHow it works: Reduce external distractions:\r\nTurn off notifications on your phone or computer.\r\nUse website blockers (like StayFocusd or Freedom) to limit distractions like social media.\r\nCreate a clean, organized workspace that is only for study.\r\n5. Body Double Technique\r\nHow it works: Work with someone else (even virtually), like in Focusmate sessions or co-study groups. Having someone \"watching\" increases accountability and keeps you on task.\r\nWhy it helps: It adds structure and prevents wandering off since you feel motivated to stay productive when others are involved.\r\n6. Set Specific Micro-Goals\r\nHow it works: Instead of saying \"Iâ€™ll read 50 pages,\" break it into smaller targets like \"Iâ€™ll finish two pages and take notes.\"\r\nWhy it helps: Micro-goals make overwhelming tasks manageable, reducing the temptation to switch tasks due to frustration.\r\n7. Visual or Auditory Focus Cues\r\nHow it works: Try white noise apps, instrumental music, or ambient soundscapes (like rain or forest sounds). Alternatively, use timers (Pomodoro) to pace your reading.\r\nWhy it helps: These cues help train your brain to stay focused by creating a mental association between the sound and studying.\r\n8. Movement-Based Breaks (Brain Reset)\r\nHow it works: Every 30-45 minutes, stand up, stretch, or walk for 2-3 minutes. Doing something physical, even briefly, resets your focus.\r\nWhy it helps: Physical movement helps release tension and keeps your mind fresh, preventing mental fatigue and daydreaming.\r\nExperiment and Adjust\r\nEveryoneâ€™s brain works differently. Try different combinations of these techniques and see which one works best for you. If the issue persists or causes frustration in multiple areas of your life, it might also be useful to consult with a mental health professional to explore underlying attention challenges.\r\n\r\nLet me know which technique you try, or if you need more ideas tailored to your study habits!\r\n\r\n\r\n\r\n\r\n\r\n\r\n', '2024-10-15 07:15:51', 0),
(49, 'Tes', 'Buku Kode IDcs1  1000 Prompt ChatGPT Content Monetizer - 1000+ Perintah Rahasia ChatGPT  Buku Prompt Mantra Chat   https://drive.google.com/drive/folders/1j954shTSpEyqrtj1Fw7GlyX4wRhc93b1?usp=drive_link', '2024-10-17 03:50:02', 0),
(50, 'statista', 'https://docs.google.com/document/d/1ZwjSKooE3M66lwVcpIJfNYCamVdKSmSyf83eCTXLmjk/edit?usp=sharing', '2024-10-17 03:55:40', 0),
(51, '1', 'Info Login\n\n\nEmail: Nekoshared@gmail.com\nPassword: MusimHujan_d7hiL6\nWorkspace: NekoShare\n\n\nNote:\nLogin di Web/Aplikasi ChatGPT bukan Gmail\nMax Device: 2 (1 Smartphone, 1 PC/Laptop)\nLanggar Rules = Hangus\n\n\nNovember - Desember', '2024-10-21 16:30:35', 1),
(52, 'ew', 'https://www.sciencedirect.com/science/article/pii/S001632872400065X', '2024-10-22 05:21:11', 0),
(53, 'vps', 'vps.delipark.id\n203.194.114.103\naejot1234\nMySql\nroot\ndelipark1234\n\n', '2024-10-24 04:21:22', 1),
(54, 'web2', 'const pool = mysql.createPool({\nconnectionLimit: 10, // Maximum number of connections\nhost: \'localhost\',\nuser: \'web1\',\npassword: \'webDelipark#01\',\ndatabase: \'web1\'\n});\n\n$servername = \"10.113.77.250\";\n$username = \"web2\";\n$password = \"webDelipark#02\";\n$dbname = \"web2\";', '2024-10-24 04:21:35', 1),
(55, 'tcr', 'http://tcr.net - 10.113.77.250\r\nadmintcr\r\n2nZXwzXz56oDNHR\r\n\r\ndbname : tcr_db\r\nuser : admintcr\r\npass : 2nZXwzXz56oDNHR\r\n\r\nerror\r\nrapihkan output file\r\n(jika nama sama) ?\r\n\r\n\r\n\r\n\r\ntestdelip.my.id\r\ndb\r\nuser\r\nadmintcr\r\npass\r\n[oj^F?!a.f=F\r\ndb\r\ntesr3386_tcrdb', '2024-10-24 04:21:51', 1),
(56, 'about graduating from college', 'Exactly! Graduating from college doesnâ€™t mean youâ€™re incompetent for a jobâ€”it simply means that you might have some areas that need development, especially if your program was more theory-focused than practice-oriented. A CS degree provides a strong foundation in problem-solving, analytical thinking, and understanding the principles of computationâ€”all of which are highly valued in the job market. However, itâ€™s common for new graduates to need some additional practical training and hands-on experience to be fully ready for specific roles.\r\n\r\nHere are some points that reinforce why a CS graduate is still highly competent, and what you can do to fill any gaps:\r\n\r\n1. Foundational Knowledge is Valuable\r\nCS graduates have a solid understanding of data structures, algorithms, computational theory, databases, and software architectureâ€”concepts that are fundamental to all areas of software development.\r\nThis theoretical knowledge makes you a better problem-solver, helps you write efficient code, and enables you to learn new tools and languages faster than someone without a CS background.\r\n2. Ability to Learn Quickly\r\nA CS degree is proof that you can handle complex concepts, learn quickly, and apply knowledge to new problemsâ€”qualities that employers highly value. Most companies expect that even the best candidates will have a learning curve when they start.\r\nMany tools and technologies used in the industry evolve quickly, so your ability to learn new ones is just as important (if not more) than knowing every tool beforehand.\r\n3. Job Training is the Norm\r\nItâ€™s normal for companies to provide on-the-job training for recent graduates. Most employers donâ€™t expect new hires to be experts in every tool they useâ€”what they look for is a willingness to learn and adapt.\r\nMany tech companies offer mentorship programs, onboarding processes, and structured learning pathways to get new graduates up to speed.\r\n4. Practical Skills Can Be Picked Up Quickly\r\nTools like Git, Docker, AWS, or front-end frameworks can be learned relatively quickly, especially if you already have the underlying programming knowledge from your degree. These tools are more about application and familiarity than deep understanding.\r\nIf you can program and have a solid understanding of concepts, learning a new language or tool is often a matter of weeks, not months.\r\n5. Internships and Projects Provide Experience\r\nMany students gain practical skills through internships, part-time jobs, open-source contributions, or personal projects during their studies. If you have any of these experiences, you already have a head start.\r\nEven if you didnâ€™t have time for internships, working on a few solid personal projects before graduation can make you competitive. A small portfolio of projects showcases your skills in a practical context.\r\n6. Job Readiness Varies by Role\r\nDifferent jobs require different levels of practical skills. Some roles, like software development or DevOps, might have a steeper learning curve if your degree was more theoretical. However, roles like data analysis, cybersecurity, or research might align closely with the theoretical background you already have.\r\nMany CS roles donâ€™t demand deep expertise in multiple tools right awayâ€”companies are often more interested in your problem-solving skills and your ability to apply theoretical knowledge effectively.\r\n7. Soft Skills Are Just as Important\r\nYour ability to communicate, work in a team, manage projects, and think critically are competencies that CS programs emphasize, and they are crucial in the workplace. Technical skills can be learned on the job, but soft skills are often harder to teach.\r\nEmployers value candidates who can think logically, adapt to new challenges, and collaborate effectivelyâ€”qualities that a rigorous CS program tends to develop well.\r\nHow to Bridge the Gap Post-Graduation\r\nIf youâ€™re worried about your practical readiness after graduation, here are a few ways to prepare yourself for the job market:\r\n\r\nFocus on Building a Portfolio\r\n\r\nEven a small portfolio of 2-3 well-documented projects can make a big difference. Pick projects that are relevant to the jobs youâ€™re targeting, like a simple web app, a machine learning project, or a data visualization.\r\nHost your projects on GitHub to showcase your skills, code quality, and version control knowledge.\r\nTake Online Courses for Specific Tools\r\n\r\nThere are plenty of online courses that are short and focused on practical skills. Courses on Git, cloud platforms (like AWS or Azure), web development, or mobile app development can give you the practical edge you might be missing.\r\nPlatforms like Udemy, Coursera, Pluralsight, and LinkedIn Learning have targeted courses that can fill gaps quickly and affordably.\r\nParticipate in Hackathons and Coding Challenges\r\n\r\nHackathons are a great way to get hands-on experience, learn to work in a team, and see how your theoretical skills translate into real projects. They also provide exposure to the tools and technologies being used in the industry.\r\nCoding challenge websites like LeetCode, HackerRank, Codeforces, and Exercism allow you to practice programming skills and get comfortable with real-world problems that you might face in technical interviews.\r\nNetwork and Seek Mentorship\r\n\r\nConnecting with professionals in the field can give you insights into what specific roles require, the tools commonly used, and advice on how to bridge any skills gaps. Platforms like LinkedIn, tech meetups, or local industry events can be valuable for networking.\r\nMany professionals are open to mentoring or giving guidance if you reach out politely and with specific questions.\r\nUse Entry-Level Jobs as Learning Opportunities\r\n\r\nEntry-level jobs, internships, and junior roles are meant for learning. Be upfront about what you know and what youâ€™re eager to learn. Showing enthusiasm for growth can make you a desirable candidate even if you donâ€™t have all the practical skills yet.\r\nMany companies value a growth mindset over perfection; if you demonstrate that you can learn quickly, youâ€™ll likely be successful in a junior role.\r\nConsider Bootcamps or Certification Programs\r\n\r\nIf you want an intense, short-term focus on practical skills after graduation, coding bootcamps can provide hands-on experience quickly. They often emphasize modern development tools, best practices, and real-world projects.\r\nCertifications in areas like cloud computing (AWS, Azure), data analysis, or cybersecurity can also validate your skills and make you more competitive.\r\nFinal Perspective\r\nA CS degree gives you a strong theoretical framework, which is something youâ€™ll always be able to rely on when learning new things. The tech field values practical skills, but theory is what enables you to understand the \"why\" behind tools, allowing you to adapt more quickly than someone who only learns \"how\" to use them. Employers are often more concerned with finding someone who has a solid understanding of concepts, can think critically, and is capable of learning whatâ€™s needed for the job.\r\n\r\nGraduation is not the endâ€”it\'s the beginning of a continuous learning journey. Youâ€™ll naturally pick up the practical skills you need as you enter the workforce, especially if you approach your early career with curiosity and a willingness to adapt.\r\n\r\n\r\n\r\n\r\n', '2024-10-24 05:27:04', 0),
(57, 'tes', '\"Saya cuma mau bilang bahwa saya tidak bermaksud menahan kode atau hasil kerja sayaâ€”tujuan utama saya adalah memastikan bahwa kontribusi saya sesuai dengan kerjaan saya. Dengan mencapai kesepakatan yang kooperatif, dan kita juga dapat menghindari risiko yang tidak perlu, menghemat biaya, dan memastikan bahwa pekerjaan yang telah saya lakukan dapat terus memberikan manfaat bagi perusahaan. Ini akan menjadi solusi yang saling menguntungkan bagi saya dan perusahaan.\"', '2024-10-26 03:45:57', 0),
(60, 'to run server', 'pm2 start npm --name \"app-deploy\" -- run start:deploy\n\nstop:deploy: Stops both the server and worker processes.\nrestart:deploy: Restarts both the server and worker processes.\nstatus: Displays the status of all PM2-managed processes.', '2024-11-06 10:23:20', 1),
(61, 'test', 'Efisiensi Data: Data yang dimasukkan secara digital bisa diakses dan dikelola dengan cepat, mengurangi waktu yang dibutuhkan dibandingkan dengan metode manual.\r\nAkurasi Data: Mengurangi potensi kesalahan manusia dalam penulisan manual, karena data dapat diinput secara langsung ke dalam sistem.\r\nKeamanan dan Penyimpanan Data: Data tersimpan secara elektronik lebih aman dari kerusakan fisik seperti hilang, robek, atau terkena air, dan dapat di-backup dengan mudah.\r\nPengolahan Data Lanjutan: Dengan menggunakan sistem digital, analisis data dan pelaporan bisa dilakukan secara otomatis, mempermudah pengambilan keputusan berbasis data.\r\nAksesibilitas: Data dapat diakses kapan saja dan dari mana saja jika sistem terhubung ke jaringan, sehingga memudahkan koordinasi tim.\r\nEfisiensi Kertas: Mengurangi penggunaan kertas yang berlebih dan membantu menjaga lingkungan.', '2024-11-07 02:25:24', 0),
(62, 'BUG', 'waktu real time, done\nSOP di lapangan\nupdate Aset', '2024-11-07 07:41:13', 0),
(63, 't', 'resilience perseverance', '2024-11-11 02:36:56', 0),
(64, 'push notification', 'https://chatgpt.com/c/67331471-e020-8004-af14-6cfd1b327b68', '2024-11-13 02:56:15', 0),
(65, 'sheet', 'https://docs.google.com/spreadsheets/d/1CeHC7DnX4i-ZRTkxjgjYpH5A6L1Hr69JFdfqAbRYNeQ/edit?pli=1&gid=1074058505#gid=1074058505', '2024-11-14 07:10:30', 0),
(66, 'chatgpt aset query sql', 'https://chatgpt.com/c/67357b90-3b48-8004-bb59-62fac77ff03b?model=o1-mini', '2024-11-14 09:47:09', 0);
INSERT INTO `notes` (`id`, `title`, `content`, `created_at`, `pinned`) VALUES
(67, 'main.js', '// main.js\r\n\r\n// ===========================\r\n// Configuration and Constants\r\n// ===========================\r\n\r\n// IndexedDB variables\r\nconst DB_NAME = \'inspectionDB\';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = \'aset\';\r\n\r\n// Time synchronization variables\r\nlet timeOffset = 0; // Difference between server and client time in ms\r\nlet lastSyncPerformanceTime = 0;\r\nlet lastSyncServerTime = 0;\r\n\r\n// Monotonic timestamp variables\r\nconst LAST_TIMESTAMP_KEY = \'lastTimestamp\'; // Key to store last timestamp in localStorage\r\n\r\n// Store original options for dependent selects\r\nconst originalOptions = {\r\n    id_tipe_aset: [],\r\n    id_tipe_hb: [],\r\n    id_tipe_door: []\r\n};\r\n\r\n// ===========================\r\n// DOM Elements\r\n// ===========================\r\n\r\nconst entryList = document.getElementById(\'entryList\');\r\nconst savedEntriesDiv = document.getElementById(\'savedEntries\');\r\nconst toggleSavedEntriesButton = document.getElementById(\'toggleSavedEntriesButton\');\r\nconst kirimSemuaButton = document.getElementById(\'kirimSemuaButton\');\r\nconst kirimSemuaSpinner = document.getElementById(\'kirimSemuaSpinner\');\r\nconst statusIndicator = document.getElementById(\'statusIndicator\');\r\nconst notification = document.getElementById(\'notification\');\r\nconst notificationIcon = notification.querySelector(\'.icon\');\r\nconst notificationMessage = notification.querySelector(\'.message\');\r\nconst saveButton = document.getElementById(\'saveButton\');\r\nconst inspectionForm = document.getElementById(\'inspectionForm\');\r\nconst previewImg = document.getElementById(\'previewImg\');\r\n\r\n// ===========================\r\n// IndexedDB Initialization\r\n// ===========================\r\n\r\nlet db;\r\n\r\nfunction initDB() {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onerror = function(event) {\r\n        console.error(\'Database error:\', event.target.errorCode);\r\n        showNotification(\'Failed to open the database.\', \'error\');\r\n    };\r\n\r\n    request.onupgradeneeded = function(event) {\r\n        db = event.target.result;\r\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n            const objectStore = db.createObjectStore(STORE_NAME, { keyPath: \'id\', autoIncrement: true });\r\n            // Define indexes if needed\r\n            objectStore.createIndex(\'client_timestamp\', \'client_timestamp\', { unique: false });\r\n        }\r\n    };\r\n\r\n    request.onsuccess = function(event) {\r\n        db = event.target.result;\r\n        displaySavedEntries();\r\n    };\r\n}\r\n\r\n// ===========================\r\n// Time Synchronization\r\n// ===========================\r\n\r\n/**\r\n * Synchronize client time with server time.\r\n */\r\nasync function synchronizeTime() {\r\n    try {\r\n        const serverTimeStr = await fetchServerTime();\r\n        const serverTime = new Date(serverTimeStr).getTime();\r\n        const clientTime = Date.now();\r\n        timeOffset = serverTime - clientTime;\r\n\r\n        // Retrieve previous synchronization reference points\r\n        const storedLastSyncServerTime = parseInt(localStorage.getItem(\'lastSyncServerTime\'), 10);\r\n        const storedLastSyncPerformanceTime = parseFloat(localStorage.getItem(\'lastSyncPerformanceTime\'));\r\n\r\n        if (!isNaN(storedLastSyncServerTime) && !isNaN(storedLastSyncPerformanceTime)) {\r\n            lastSyncServerTime = storedLastSyncServerTime;\r\n            lastSyncPerformanceTime = storedLastSyncPerformanceTime;\r\n        } else {\r\n            // Initialize if not present\r\n            lastSyncServerTime = serverTime;\r\n            lastSyncPerformanceTime = performance.now();\r\n        }\r\n\r\n        // Update reference points\r\n        lastSyncServerTime = serverTime;\r\n        lastSyncPerformanceTime = performance.now();\r\n\r\n        // Store updated reference points\r\n        localStorage.setItem(\'lastSyncServerTime\', lastSyncServerTime);\r\n        localStorage.setItem(\'lastSyncPerformanceTime\', lastSyncPerformanceTime);\r\n\r\n        console.log(`Time synchronized. Offset: ${timeOffset} ms`);\r\n\r\n        // Update lastTimestamp to ensure monotonicity\r\n        let lastTimestamp = parseInt(localStorage.getItem(LAST_TIMESTAMP_KEY), 10) || serverTime;\r\n        const adjustedLastTimestamp = Math.max(lastTimestamp, serverTime);\r\n        localStorage.setItem(LAST_TIMESTAMP_KEY, adjustedLastTimestamp);\r\n    } catch (error) {\r\n        console.error(\'Failed to synchronize time:\', error);\r\n        showNotification(\'Failed to synchronize time with server.\', \'error\');\r\n    }\r\n}\r\n\r\n/**\r\n * Fetches the current server time from the server.\r\n * @returns {Promise<string>} A promise that resolves to the server time in ISO 8601 format.\r\n */\r\nasync function fetchServerTime() {\r\n    try {\r\n        const response = await fetch(\'/api/server-time\', { cache: \'no-store\' });\r\n        if (!response.ok) {\r\n            throw new Error(`Server responded with status ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        if (!data.serverTime) {\r\n            throw new Error(\'Server time not found in response\');\r\n        }\r\n        return data.serverTime; // Expected format: \'2024-04-25T12:34:56Z\'\r\n    } catch (error) {\r\n        console.error(\'Error fetching server time:\', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Get the estimated current server time based on performance.now()\r\n * @returns {number} Estimated server time in ms since epoch.\r\n */\r\nfunction getCurrentServerTime() {\r\n    const storedLastSyncServerTime = parseInt(localStorage.getItem(\'lastSyncServerTime\'), 10);\r\n    const storedLastSyncPerformanceTime = parseFloat(localStorage.getItem(\'lastSyncPerformanceTime\'));\r\n\r\n    if (isNaN(storedLastSyncServerTime) || isNaN(storedLastSyncPerformanceTime)) {\r\n        // Fallback if not available\r\n        return Date.now() + timeOffset;\r\n    }\r\n\r\n    const elapsed = performance.now() - storedLastSyncPerformanceTime;\r\n    return storedLastSyncServerTime + elapsed + timeOffset;\r\n}\r\n\r\n/**\r\n * Detect significant time drift.\r\n * @returns {boolean} True if drift is significant, else false.\r\n */\r\nfunction isTimeDrifted() {\r\n    const expectedServerTime = getCurrentServerTime();\r\n    const actualServerTime = Date.now() + timeOffset; // Approximation\r\n\r\n    // Allow a small margin of error (e.g., 2 minutes)\r\n    const drift = Math.abs(actualServerTime - expectedServerTime);\r\n    return drift > 2 * 60 * 1000; // 2 minutes in ms\r\n}\r\n\r\n// ===========================\r\n// Monotonic Timestamp Functions\r\n// ===========================\r\n\r\n/**\r\n * Generates a reliable and monotonic timestamp.\r\n * @returns {string} An ISO 8601 formatted timestamp.\r\n */\r\nfunction getReliableTimestamp() {\r\n    // Retrieve the time offset\r\n    let offset = parseInt(localStorage.getItem(\'serverTimeOffset\'), 10);\r\n    if (isNaN(offset)) offset = timeOffset || 0;\r\n\r\n    // Calculate the current server-aligned time\r\n    const currentTime = getCurrentServerTime();\r\n\r\n    // Retrieve the last timestamp used\r\n    let lastTimestamp = parseInt(localStorage.getItem(LAST_TIMESTAMP_KEY), 10);\r\n    if (isNaN(lastTimestamp)) {\r\n        lastTimestamp = currentTime;\r\n    }\r\n\r\n    // Ensure the new timestamp is greater than the last timestamp\r\n    const newTimestamp = Math.max(currentTime, lastTimestamp + 1);\r\n\r\n    // Update the lastTimestamp in storage\r\n    localStorage.setItem(LAST_TIMESTAMP_KEY, newTimestamp);\r\n\r\n    // Return the new timestamp in ISO format\r\n    return new Date(newTimestamp).toISOString();\r\n}\r\n\r\n// ===========================\r\n// User Interface Functions\r\n// ===========================\r\n\r\n/**\r\n * Display notifications to the user.\r\n * @param {string} message - The notification message.\r\n * @param {string} type - Type of notification: \'success\', \'error\', \'info\'.\r\n */\r\nfunction showNotification(message, type) {\r\n    notificationMessage.textContent = message;\r\n\r\n    // Reset classes\r\n    notification.classList.remove(\'success\', \'error\', \'info\');\r\n    notificationIcon.classList.remove(\'fa-check-circle\', \'fa-times-circle\', \'fa-info-circle\');\r\n\r\n    // Add new classes based on type\r\n    if (type === \'success\') {\r\n        notification.classList.add(\'success\');\r\n        notificationIcon.classList.add(\'fa-check-circle\');\r\n    } else if (type === \'error\') {\r\n        notification.classList.add(\'error\');\r\n        notificationIcon.classList.add(\'fa-times-circle\');\r\n    } else if (type === \'info\') {\r\n        notification.classList.add(\'info\');\r\n        notificationIcon.classList.add(\'fa-info-circle\');\r\n    }\r\n\r\n    // Show the notification\r\n    notification.classList.add(\'show\');\r\n\r\n    // Hide after 3 seconds\r\n    setTimeout(() => {\r\n        notification.classList.remove(\'show\');\r\n    }, 3000);\r\n}\r\n\r\n/**\r\n * Update online/offline status indicator.\r\n */\r\nfunction updateOnlineStatus() {\r\n    if (!navigator.onLine) {\r\n        statusIndicator.textContent = \'Anda offline. Data akan disimpan secara lokal.\';\r\n        statusIndicator.style.display = \'block\';\r\n        kirimSemuaButton.disabled = true; // Disable the button\r\n    } else {\r\n        statusIndicator.textContent = \'Anda online.\';\r\n        statusIndicator.style.display = \'block\';\r\n        setTimeout(() => {\r\n            statusIndicator.style.display = \'none\';\r\n        }, 3000); // Hide after 3 seconds\r\n        kirimSemuaButton.disabled = false; // Enable the button\r\n        synchronizeTime().then(() => {\r\n            // Automatically submit any pending entries upon reconnection\r\n            synchronizeLocalAssets();\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Preview the selected image file.\r\n */\r\nfunction previewFile() {\r\n    const fileInput = document.getElementById(\'foto\');\r\n    const file = fileInput.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = function () {\r\n        const img = new Image();\r\n        img.src = reader.result;\r\n\r\n        img.onload = async function () {\r\n            // Create a canvas to draw the resized image\r\n            const canvas = document.createElement(\'canvas\');\r\n            const maxWidth = 800; // Desired maximum width\r\n            let width = img.width;\r\n            let height = img.height;\r\n\r\n            // Calculate new dimensions while maintaining aspect ratio\r\n            if (width > maxWidth) {\r\n                height = height * (maxWidth / width);\r\n                width = maxWidth;\r\n            }\r\n\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            const pica = new Pica();\r\n\r\n            try {\r\n                const result = await pica.resize(img, canvas);\r\n\r\n                // Convert canvas to a Blob with JPEG compression\r\n                const blob = await pica.toBlob(canvas, \'image/jpeg\', 0.7); // 70% quality\r\n\r\n                // Display the processed image in the preview\r\n                previewImg.src = URL.createObjectURL(blob);\r\n                previewImg.style.display = \'block\';\r\n\r\n                // Store the processed image blob for later use\r\n                fileInput.processedBlob = blob;\r\n            } catch (error) {\r\n                console.error(\'Error processing image:\', error);\r\n                showNotification(\'Error processing image.\', \'error\');\r\n            }\r\n        };\r\n\r\n        img.onerror = function () {\r\n            console.error(\'Error loading image.\');\r\n            showNotification(\'Error loading image.\', \'error\');\r\n        };\r\n    };\r\n\r\n    if (file) {\r\n        reader.readAsDataURL(file);\r\n    } else {\r\n        previewImg.src = \'\';\r\n        previewImg.style.display = \'none\';\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Toggle the display of the saved entries section.\r\n */\r\ntoggleSavedEntriesButton.addEventListener(\'click\', function () {\r\n    if (savedEntriesDiv.style.display === \'none\' || savedEntriesDiv.style.display === \'\') {\r\n        savedEntriesDiv.style.display = \'block\';\r\n        toggleSavedEntriesButton.innerHTML = \'<i class=\"fas fa-folder-minus\"></i> Sembunyikan Data Tersimpan\';\r\n    } else {\r\n        savedEntriesDiv.style.display = \'none\';\r\n        toggleSavedEntriesButton.innerHTML = \'<i class=\"fas fa-folder-open\"></i> Tampilkan Data Tersimpan\';\r\n    }\r\n});\r\n\r\n// Attach the event listener for the \"Kirim Semua\" button\r\nkirimSemuaButton.addEventListener(\'click\', handleSubmitAll);\r\n\r\n// Attach the event listener for the file input to preview images\r\ndocument.getElementById(\'foto\').addEventListener(\'change\', previewFile);\r\n\r\n// ===========================\r\n// Data Handling Functions\r\n// ===========================\r\n\r\n/**\r\n * Display saved entries from IndexedDB.\r\n */\r\nfunction displaySavedEntries() {\r\n    entryList.innerHTML = \'\';\r\n\r\n    const transaction = db.transaction([STORE_NAME], \'readonly\');\r\n    const objectStore = transaction.objectStore(STORE_NAME);\r\n    const request = objectStore.getAll();\r\n\r\n    request.onsuccess = function(event) {\r\n        const savedData = event.target.result;\r\n\r\n        savedData.forEach(function(entry) {\r\n            // Convert timestamp to readable date\r\n            const date = new Date(entry.client_timestamp);\r\n            const formattedDate = date.toLocaleString(\'id-ID\', {\r\n                weekday: \'long\',\r\n                year: \'numeric\',\r\n                month: \'long\',\r\n                day: \'numeric\',\r\n                hour: \'2-digit\',\r\n                minute: \'2-digit\',\r\n                second: \'2-digit\',\r\n                hour12: false\r\n            });\r\n\r\n            // Build the HTML content\r\n            let entryHtml = `\r\n                <strong>Nama Petugas:</strong> ${entry.nama_petugas || \'\'} <br>\r\n                <strong>Lantai:</strong> ${entry.nama_lantai || \'\'} <br>\r\n                <!-- <strong>Waktu:</strong> ${formattedDate} <br> --> <!-- waktu di datasave -->\r\n            `;\r\n\r\n            if (entry.nama_aset) {\r\n                entryHtml += `<strong>Nama Aset:</strong> ${entry.nama_aset} <br>`;\r\n            }\r\n            if (entry.nama_hb) {\r\n                entryHtml += `<strong>Box Hydrant:</strong> ${entry.nama_hb} <br>`;\r\n            }\r\n            if (entry.nama_door) {\r\n                entryHtml += `<strong>Emergency Door:</strong> ${entry.nama_door} <br>`;\r\n            }\r\n\r\n            entryHtml += `\r\n                <strong>Kondisi:</strong> ${entry.nama_kondisi || \'\'} <br>\r\n                <strong>Catatan:</strong> ${entry.catatan || \'\'} <br>\r\n            `;\r\n\r\n            // Include image preview\r\n            if (entry.foto) {\r\n                const url = URL.createObjectURL(entry.foto);\r\n                entryHtml += `<img src=\"${url}\" alt=\"Foto\" style=\"max-width: 100px;\" onload=\"URL.revokeObjectURL(this.src)\"><br>`;\r\n            }\r\n\r\n            // Show error message if available and add Retry button\r\n            if (entry.errorMessage) {\r\n                entryHtml += `<div style=\"color: #f44336; margin-top: 10px;\"><strong>Error:</strong> ${entry.errorMessage}</div>`;\r\n                entryHtml += `<button class=\"retry-button\" onclick=\"retryEntry(${entry.id})\"><i class=\"fas fa-redo\"></i> Retry</button>`;\r\n            }\r\n\r\n            entryHtml += `<button class=\"delete-button\" onclick=\"deleteEntry(${entry.id})\"><i class=\"fas fa-trash-alt\"></i> Hapus</button>`;\r\n\r\n            const li = document.createElement(\'li\');\r\n            li.innerHTML = entryHtml;\r\n            entryList.appendChild(li);\r\n        });\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        console.error(\'Error fetching data:\', event.target.errorCode);\r\n        showNotification(\'Error fetching saved entries.\', \'error\');\r\n    };\r\n}\r\n\r\n/**\r\n * Save form data to IndexedDB with appropriate timestamp.\r\n */\r\nsaveButton.addEventListener(\'click\', async function () {\r\n    // Check for time drift before saving\r\n    if (isTimeDrifted()) {\r\n        showNotification(\'Waktu perangkat Anda telah berubah. Silakan resinkronkan waktu.\', \'error\');\r\n        synchronizeTime(); // Attempt to resynchronize\r\n        return; // Prevent saving until synchronization\r\n    }\r\n\r\n    const formData = new FormData(inspectionForm);\r\n    const entry = {};\r\n\r\n    // Validate Kondisi selection\r\n    const kondisiSelect = document.getElementById(\'id_kondisi\');\r\n    if (!kondisiSelect.value) {\r\n        showNotification(\'Silakan pilih lantai, pilih aset, foto, lalu pilih kondisi sebelum menyimpan.\', \'error\');\r\n        return; // Prevent saving\r\n    }\r\n\r\n    // Use the processed image blob\r\n    const fileInput = document.getElementById(\'foto\');\r\n    const processedBlob = fileInput.processedBlob;\r\n\r\n    if (processedBlob) {\r\n        // Store the processed image blob\r\n        entry[\'foto\'] = processedBlob;\r\n\r\n        // Store form data\r\n        formData.forEach(function(value, key) {\r\n            if (key !== \'foto\') {\r\n                entry[key] = value;\r\n            }\r\n        });\r\n\r\n        // Store the names directly\r\n        entry[\'nama_petugas\'] = document.querySelector(\'#id_user option:checked\').textContent;\r\n        entry[\'nama_lantai\'] = document.querySelector(\'#id_tipe_lantai option:checked\').textContent;\r\n        entry[\'nama_kondisi\'] = kondisiSelect.options[kondisiSelect.selectedIndex].text;\r\n\r\n        if (entry[\'id_tipe_aset\']) {\r\n            entry[\'nama_aset\'] = document.querySelector(\'#id_tipe_aset option:checked\').textContent;\r\n        }\r\n        if (entry[\'id_tipe_hb\']) {\r\n            entry[\'nama_hb\'] = document.querySelector(\'#id_tipe_hb option:checked\').textContent;\r\n        }\r\n        if (entry[\'id_tipe_door\']) {\r\n            entry[\'nama_door\'] = document.querySelector(\'#id_tipe_door option:checked\').textContent;\r\n        }\r\n\r\n        // Generate a reliable timestamp\r\n        const reliableTimestamp = getReliableTimestamp();\r\n        entry[\'client_timestamp\'] = reliableTimestamp;\r\n\r\n        // Save to IndexedDB\r\n        const transaction = db.transaction([STORE_NAME], \'readwrite\');\r\n        const objectStore = transaction.objectStore(STORE_NAME);\r\n        const request = objectStore.add(entry);\r\n\r\n        request.onsuccess = function(event) {\r\n            displaySavedEntries();\r\n            showNotification(\'Data berhasil disimpan secara lokal.\', \'success\');\r\n\r\n            // Reset the form\r\n            inspectionForm.reset();\r\n            previewImg.src = \'\';\r\n            previewImg.style.display = \'none\';\r\n\r\n            // Reset select options\r\n            resetSelectOptions(\'id_tipe_aset\');\r\n            resetSelectOptions(\'id_tipe_hb\');\r\n            resetSelectOptions(\'id_tipe_door\');\r\n            document.getElementById(\'id_kondisi\').disabled = true;\r\n        };\r\n\r\n        request.onerror = function(event) {\r\n            showNotification(\'Error menyimpan data: \' + event.target.errorCode, \'error\');\r\n        };\r\n    } else {\r\n        showNotification(\'Silakan foto terlebih dahulu.\', \'error\');\r\n    }\r\n});\r\n\r\n/**\r\n * Reset select options to original state.\r\n * @param {string} selectId - The ID of the select element.\r\n */\r\nfunction resetSelectOptions(selectId) {\r\n    const selectElement = document.getElementById(selectId);\r\n\r\n    // Clear existing options\r\n    selectElement.innerHTML = \'<option value=\"\" selected disabled>Pilih...</option>\';\r\n\r\n    // Append original options\r\n    const options = originalOptions[selectId];\r\n\r\n    options.forEach(function(option) {\r\n        selectElement.appendChild(option.cloneNode(true));\r\n    });\r\n\r\n    selectElement.disabled = true;\r\n}\r\n\r\n/**\r\n * Handle selection changes and enable Kondisi.\r\n * @param {string} selected - The selected category (\'aset\', \'hb\', \'door\').\r\n */\r\nfunction handleSelection(selected) {\r\n    const kondisiSelect = document.getElementById(\'id_kondisi\');\r\n    kondisiSelect.disabled = false;\r\n\r\n    if (selected === \'aset\') {\r\n        document.getElementById(\'id_tipe_hb\').disabled = true;\r\n        document.getElementById(\'id_tipe_door\').disabled = true;\r\n        document.getElementById(\'id_tipe_hb\').value = \'\';\r\n        document.getElementById(\'id_tipe_door\').value = \'\';\r\n    } else if (selected === \'hb\') {\r\n        document.getElementById(\'id_tipe_aset\').disabled = true;\r\n        document.getElementById(\'id_tipe_door\').disabled = true;\r\n        document.getElementById(\'id_tipe_aset\').value = \'\';\r\n        document.getElementById(\'id_tipe_door\').value = \'\';\r\n    } else if (selected === \'door\') {\r\n        document.getElementById(\'id_tipe_aset\').disabled = true;\r\n        document.getElementById(\'id_tipe_hb\').disabled = true;\r\n        document.getElementById(\'id_tipe_aset\').value = \'\';\r\n        document.getElementById(\'id_tipe_hb\').value = \'\';\r\n    }\r\n}\r\n\r\n/**\r\n * Filter dropdown options based on selected lantai.\r\n */\r\nfunction filterOptionsByLantai() {\r\n    const selectedLantaiId = document.getElementById(\'id_tipe_lantai\').value;\r\n    filterDropdownOptions(\'id_tipe_aset\', selectedLantaiId);\r\n    filterDropdownOptions(\'id_tipe_hb\', selectedLantaiId);\r\n    filterDropdownOptions(\'id_tipe_door\', selectedLantaiId);\r\n}\r\n\r\nfunction filterDropdownOptions(selectId, lantaiId) {\r\n    const selectElement = document.getElementById(selectId);\r\n\r\n    // Clear existing options\r\n    selectElement.innerHTML = \'<option value=\"\" selected disabled>Pilih...</option>\';\r\n\r\n    // Get the original options\r\n    const options = originalOptions[selectId];\r\n\r\n    options.forEach(function(option) {\r\n        if (option.getAttribute(\'data-lantai\') === lantaiId) {\r\n            selectElement.appendChild(option.cloneNode(true));\r\n        }\r\n    });\r\n\r\n    selectElement.disabled = false;\r\n}\r\n\r\n// ===========================\r\n// Data Submission Functions\r\n// ===========================\r\n\r\n/**\r\n * Submit all saved entries to the server.\r\n */\r\nfunction handleSubmitAll() {\r\n    if (!navigator.onLine) {\r\n        showNotification(\'Anda sedang offline. Tidak dapat mengirim data.\', \'error\');\r\n        return;\r\n    }\r\n\r\n    // Show the spinner and disable the Kirim Semua button\r\n    kirimSemuaButton.disabled = true;\r\n    kirimSemuaSpinner.style.display = \'inline-block\';\r\n\r\n    const transaction = db.transaction([STORE_NAME], \'readonly\');\r\n    const objectStore = transaction.objectStore(STORE_NAME);\r\n    const request = objectStore.getAll();\r\n\r\n    request.onsuccess = function(event) {\r\n        const entriesToSubmit = event.target.result;\r\n        if (entriesToSubmit.length === 0) {\r\n            kirimSemuaButton.disabled = false; // Re-enable the button\r\n            kirimSemuaSpinner.style.display = \'none\'; // Hide the spinner\r\n            showNotification(\'Tidak ada data tersimpan untuk dikirim.\', \'info\');\r\n            return;\r\n        }\r\n\r\n        submitEntries(entriesToSubmit);\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        kirimSemuaButton.disabled = false; // Re-enable the button\r\n        kirimSemuaSpinner.style.display = \'none\'; // Hide the spinner\r\n        console.error(\'Error fetching entries for submission:\', event.target.errorCode);\r\n        showNotification(\'Error mengambil data untuk pengiriman.\', \'error\');\r\n    };\r\n}\r\n\r\n/**\r\n * Submit entries one by one to the server.\r\n * @param {Array} entries - Array of entries to submit.\r\n */\r\nfunction submitEntries(entries) {\r\n    let index = 0;\r\n    const failedEntries = [];\r\n\r\n    function submitNextEntry() {\r\n        if (index >= entries.length) {\r\n            kirimSemuaButton.disabled = false; // Re-enable the button\r\n            kirimSemuaSpinner.style.display = \'none\'; // Hide the spinner\r\n            displaySavedEntries();\r\n\r\n            if (failedEntries.length > 0) {\r\n                showNotification(`${failedEntries.length} entri gagal dikirim. Anda dapat mencoba mengirim ulang secara individu.`, \'error\');\r\n            } else {\r\n                showNotification(\'Data berhasil dikirim ke server.\', \'success\');\r\n            }\r\n            return;\r\n        }\r\n\r\n        const entry = entries[index];\r\n        const formData = new FormData();\r\n\r\n        // Append the image file\r\n        formData.append(\'foto\', entry.foto, \'image.jpg\');\r\n\r\n        // Append other fields\r\n        Object.entries(entry).forEach(function([key, value]) {\r\n            if (![\'foto\', \'errorMessage\', \'id\'].includes(key) && !key.startsWith(\'nama_\') && key !== \'client_timestamp\') {\r\n                formData.append(key, value);\r\n            }\r\n        });\r\n\r\n        // Append the client-assigned timestamp as ISO string\r\n        formData.append(\'clientTimestamp\', entry.client_timestamp);\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\'POST\', \'/upload\', true); // Replace \'/upload\' with your actual endpoint\r\n\r\n        xhr.onload = function () {\r\n            if (xhr.status >= 200 && xhr.status < 300) {\r\n                const response = JSON.parse(xhr.responseText);\r\n                if (response.success) {\r\n                    // Remove the entry from IndexedDB\r\n                    deleteEntry(entry.id, false);\r\n                    index++;\r\n                    submitNextEntry();\r\n                } else {\r\n                    // Handle server-side validation errors\r\n                    entry.errorMessage = response.message || \'Unknown error\';\r\n                    updateFailedEntry(entry);\r\n                    index++;\r\n                    submitNextEntry();\r\n                }\r\n            } else {\r\n                // Handle HTTP errors\r\n                entry.errorMessage = xhr.statusText;\r\n                updateFailedEntry(entry);\r\n                index++;\r\n                submitNextEntry();\r\n            }\r\n        };\r\n\r\n        xhr.onerror = function () {\r\n            console.error(\'Network error during submission.\');\r\n            entry.errorMessage = \'Network error\';\r\n            updateFailedEntry(entry);\r\n            index++;\r\n            submitNextEntry();\r\n        };\r\n\r\n        xhr.send(formData);\r\n    }\r\n\r\n    submitNextEntry();\r\n}\r\n\r\n/**\r\n * Retry submitting a single failed entry.\r\n * @param {number} id - The ID of the entry to retry.\r\n */\r\nfunction retryEntry(id) {\r\n    if (!navigator.onLine) {\r\n        showNotification(\'Anda sedang offline. Tidak dapat mengirim data.\', \'error\');\r\n        return;\r\n    }\r\n    const transaction = db.transaction([STORE_NAME], \'readwrite\');\r\n    const objectStore = transaction.objectStore(STORE_NAME);\r\n    const getRequest = objectStore.get(id);\r\n\r\n    getRequest.onsuccess = function(event) {\r\n        const entry = event.target.result;\r\n\r\n        // Clear previous error message\r\n        delete entry.errorMessage;\r\n\r\n        const formData = new FormData();\r\n\r\n        // Append the image file\r\n        formData.append(\'foto\', entry.foto);\r\n\r\n        // Append other fields\r\n        Object.entries(entry).forEach(function([key, value]) {\r\n            if (![\'foto\', \'errorMessage\', \'id\'].includes(key) && !key.startsWith(\'nama_\') && key !== \'client_timestamp\') {\r\n                formData.append(key, value);\r\n            }\r\n        });\r\n\r\n        // Append the client-assigned timestamp as ISO string\r\n        formData.append(\'clientTimestamp\', entry.client_timestamp);\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\'POST\', \'/upload\', true); // Replace \'/upload\' with your actual endpoint\r\n\r\n        xhr.onload = function () {\r\n            if (xhr.status >= 200 && xhr.status < 300) {\r\n                const response = JSON.parse(xhr.responseText);\r\n                if (response.success) {\r\n                    // Remove the entry from IndexedDB\r\n                    deleteEntry(id, false);\r\n                    displaySavedEntries();\r\n                    showNotification(\'Data berhasil dikirim ke server.\', \'success\');\r\n                } else {\r\n                    // Handle server-side validation errors\r\n                    entry.errorMessage = response.message || \'Unknown error\';\r\n                    updateFailedEntry(entry);\r\n                }\r\n            } else {\r\n                // Handle errors\r\n                entry.errorMessage = xhr.statusText;\r\n                updateFailedEntry(entry);\r\n            }\r\n        };\r\n\r\n        xhr.onerror = function () {\r\n            console.error(\'Network error during retry.\');\r\n            entry.errorMessage = \'Network error\';\r\n            updateFailedEntry(entry);\r\n        };\r\n\r\n        xhr.send(formData);\r\n    };\r\n\r\n    getRequest.onerror = function(event) {\r\n        console.error(\'Error retrieving entry:\', event.target.errorCode);\r\n        showNotification(\'Error mengambil data entry.\', \'error\');\r\n    };\r\n}\r\n\r\n/**\r\n * Delete an entry from IndexedDB.\r\n * @param {number} id - The ID of the entry to delete.\r\n * @param {boolean} showNotif - Whether to show a notification after deletion.\r\n */\r\nfunction deleteEntry(id, showNotif = true) {\r\n    console.log(\'deleteEntry called with id:\', id, \'showNotif:\', showNotif);\r\n    const transaction = db.transaction([STORE_NAME], \'readwrite\');\r\n    const objectStore = transaction.objectStore(STORE_NAME);\r\n    const request = objectStore.delete(id);\r\n\r\n    request.onsuccess = function(event) {\r\n        displaySavedEntries();\r\n        if (showNotif) {\r\n            showNotification(\'Entry terhapus.\', \'success\');\r\n        }\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        console.error(\'Error deleting entry:\', event.target.errorCode);\r\n        if (showNotif) {\r\n            showNotification(\'Error menghapus entry.\', \'error\');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Update a failed entry with an error message.\r\n * @param {Object} entry - The entry object to update.\r\n */\r\nfunction updateFailedEntry(entry) {\r\n    const transaction = db.transaction([STORE_NAME], \'readwrite\');\r\n    const objectStore = transaction.objectStore(STORE_NAME);\r\n    const updateRequest = objectStore.put(entry);\r\n\r\n    updateRequest.onsuccess = function() {\r\n        displaySavedEntries();\r\n        showNotification(`Error mengirim entry: ${entry.errorMessage}`, \'error\');\r\n    };\r\n\r\n    updateRequest.onerror = function(event) {\r\n        console.error(\'Error updating entry:\', event.target.errorCode);\r\n        showNotification(\'Error memperbarui entry.\', \'error\');\r\n    };\r\n}\r\n\r\n// ===========================\r\n// Event Listeners for Online/Offline\r\n// ===========================\r\n\r\nwindow.addEventListener(\'online\', () => {\r\n    updateOnlineStatus();\r\n    synchronizeTime(); // Re-synchronize when back online\r\n});\r\n\r\nwindow.addEventListener(\'offline\', updateOnlineStatus);\r\n\r\n// ===========================\r\n// Service Worker Registration\r\n// ===========================\r\n\r\nif (\'serviceWorker\' in navigator) {\r\n    navigator.serviceWorker.register(\'/sw.js\')\r\n    .then(function(registration) {\r\n        console.log(\'Service Worker registered with scope:\', registration.scope);\r\n    })\r\n    .catch(function(err) {\r\n        console.log(\'Service Worker registration failed:\', err);\r\n    });\r\n}\r\n\r\n// ===========================\r\n// Initial Load and Periodic Synchronization\r\n// ===========================\r\n\r\nwindow.onload = function() {\r\n    initDB();\r\n    initializeTimeSync();\r\n\r\n    // Store original options for dependent selects\r\n    [\'id_tipe_aset\', \'id_tipe_hb\', \'id_tipe_door\'].forEach(function(selectId) {\r\n        const selectElement = document.getElementById(selectId);\r\n        originalOptions[selectId] = Array.from(selectElement.options);\r\n    });\r\n\r\n    updateOnlineStatus(); // Initial status\r\n\r\n    // Periodic synchronization every hour\r\n    setInterval(() => {\r\n        if (navigator.onLine) {\r\n            synchronizeTime();\r\n        }\r\n    }, 60 * 60 * 1000); // Every hour\r\n};\r\n\r\n/**\r\n * Initialize time synchronization based on online status.\r\n */\r\nasync function initializeTimeSync() {\r\n    if (navigator.onLine) {\r\n        await synchronizeTime();\r\n    } else {\r\n        // Attempt to use previously stored offset and reference points\r\n        const storedOffset = parseInt(localStorage.getItem(\'serverTimeOffset\'), 10);\r\n        if (!isNaN(storedOffset)) {\r\n            timeOffset = storedOffset;\r\n            const storedLastSyncServerTime = parseInt(localStorage.getItem(\'lastSyncServerTime\'), 10);\r\n            const storedLastSyncPerformanceTime = parseFloat(localStorage.getItem(\'lastSyncPerformanceTime\'));\r\n    \r\n            if (!isNaN(storedLastSyncServerTime) && !isNaN(storedLastSyncPerformanceTime)) {\r\n                lastSyncServerTime = storedLastSyncServerTime;\r\n                lastSyncPerformanceTime = storedLastSyncPerformanceTime;\r\n            }\r\n        } else {\r\n            // Default to zero offset if no synchronization has occurred\r\n            timeOffset = 0;\r\n            lastSyncServerTime = Date.now();\r\n            lastSyncPerformanceTime = performance.now();\r\n            localStorage.setItem(\'lastSyncServerTime\', lastSyncServerTime);\r\n            localStorage.setItem(\'lastSyncPerformanceTime\', lastSyncPerformanceTime);\r\n        }\r\n\r\n        // Initialize lastTimestamp if not set\r\n        if (!localStorage.getItem(LAST_TIMESTAMP_KEY)) {\r\n            localStorage.setItem(LAST_TIMESTAMP_KEY, lastSyncServerTime);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Synchronize locally saved assets with the server.\r\n * This function is called after successful time synchronization.\r\n */\r\nasync function synchronizeLocalAssets() {\r\n    const localAssets = JSON.parse(localStorage.getItem(\'localAssets\')) || [];\r\n    if (localAssets.length === 0) {\r\n        console.log(\'No local assets to synchronize.\');\r\n        return;\r\n    }\r\n\r\n    console.log(`Synchronizing ${localAssets.length} local assets with the server...`);\r\n\r\n    for (const asset of localAssets) {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\'foto\', asset.foto);\r\n\r\n            // Append other fields\r\n            Object.entries(asset).forEach(([key, value]) => {\r\n                if (![\'foto\', \'errorMessage\', \'id\'].includes(key) && !key.startsWith(\'nama_\') && key !== \'client_timestamp\') {\r\n                    formData.append(key, value);\r\n                }\r\n            });\r\n\r\n            // Append the client-assigned timestamp as ISO string\r\n            formData.append(\'clientTimestamp\', asset.client_timestamp);\r\n\r\n            const response = await fetch(\'/upload\', { // Replace \'/upload\' with your actual endpoint\r\n                method: \'POST\',\r\n                body: formData\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Server responded with status ${response.status}`);\r\n            }\r\n\r\n            const responseData = await response.json();\r\n            if (responseData.success) {\r\n                // Remove the entry from IndexedDB\r\n                deleteEntry(asset.id, false);\r\n                console.log(\'Asset synchronized:\', asset);\r\n            } else {\r\n                // Handle server-side validation errors\r\n                asset.errorMessage = responseData.message || \'Unknown error\';\r\n                updateFailedEntry(asset);\r\n            }\r\n        } catch (error) {\r\n            console.error(\'Error synchronizing asset:\', asset, error);\r\n            asset.errorMessage = error.message || \'Unknown error\';\r\n            updateFailedEntry(asset);\r\n        }\r\n    }\r\n\r\n    // Clear local assets after successful synchronization\r\n    localStorage.removeItem(\'localAssets\');\r\n    console.log(\'All local assets have been synchronized and cleared from local storage.\');\r\n}', '2024-11-18 10:05:03', 0),
(68, 'ubuntu', 'https://old-releases.ubuntu.com/releases/22.04.1/ubuntu-22.04-desktop-amd64.iso', '2024-11-21 03:07:00', 0),
(69, 'env', '# .env.deploy\r\n\r\n# =====================\r\n# Server Configuration\r\n# =====================\r\n\r\n# Session Secret (used to sign session ID cookies)\r\nSESSION_SECRET=0\r\n\r\n# =====================\r\n# Redis Configuration\r\n# =====================\r\n\r\n# Redis server host (usually \'127.0.0.1\' for local)\r\nREDIS_HOST=127.0.0.1\r\n\r\n# Redis server port (default is 6379)\r\nREDIS_PORT=6379\r\n\r\n# Redis password (leave blank if not set)\r\nREDIS_PASSWORD=your_redis_password_if_any\r\n\r\n# =====================\r\n# Database Configuration\r\n# =====================\r\n\r\n# Database host\r\nDB_HOST=localhost\r\n\r\n# Database user\r\nDB_USER=root\r\n\r\n# Database password\r\nDB_PASSWORD=\r\n\r\n# Database name\r\nDB_NAME=web0\r\n\r\n# =====================\r\n# Other Configurations\r\n# =====================\r\n\r\n# Application Port (optional, defaults to 3000 if not set)\r\nPORT=3000\r\n\r\n# =====================\r\n# Optional Configurations\r\n# =====================\r\n\r\n# If you have other environment-specific variables, add them below\r\n# EXAMPLE_VARIABLE=value', '2024-11-22 08:07:05', 0),
(70, 'test asset-inspection', 'https://chatgpt.com/c/674048a4-c6bc-8004-a053-99794c1015f1?model=o1-preview', '2024-11-22 09:36:16', 0),
(71, 'linux restore', 'Restore on Another PC:\r\n\r\nInstall Ubuntu on the new PC.\r\nSet up Deja Dup on the new PC.\r\nChoose Restore and point to your backup location.', '2024-11-23 02:38:07', 0),
(72, 'linux note', '//open codium su\r\ncodium-sudo\r\n\r\n//token github\r\n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', '2024-11-25 07:32:09', 1),
(73, 'reset', 'git reset --hard <commit>', '2024-11-26 03:02:34', 0),
(74, 'step remote SE', 'https://defiant-cocoa-e9e.notion.site/Perjalanan-Menjadi-Remote-Software-Engineer-139f3ddb32fe80e1a7b6e5051d1929e0?p=139f3ddb32fe8169ab63cbc1bc87ff85&pm=s', '2024-11-29 10:09:21', 0),
(75, 'setting site-availabe', 'server {\nlisten 80;\nserver_name dpsec.my.id www.dpsec.my.id;\n\n# Redirect all HTTP traffic to HTTPS\nreturn 301 https://$host$request_uri;\n}\n\nserver {\nlisten 443 ssl;\nserver_name dpsec.my.id www.dpsec.my.id;\n\nssl_certificate /etc/letsencrypt/live/dpsec.my.id/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/dpsec.my.id/privkey.pem;\n\nlocation / {\nproxy_pass http://localhost:3000;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\n}\n}', '2024-12-02 08:19:05', 1);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `notes`
--
ALTER TABLE `notes`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `notes`
--
ALTER TABLE `notes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=76;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
